---
title: "Final"
output: html_document
date: "2024-04-29"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(dplyr)
library(vegan)
library(vegan3d)
library(mgcv)
library(MASS)
library(rgl)
library(ggplot2)
library(tidyverse)
library(corrplot)
library(GPArotation)
library(psych)
library(PerformanceAnalytics)
library(heplots)
```

```{r}
speeddate <- read.csv("speed_data_data.csv")
speeddate <- speeddate %>%  # Pick out only individual people
  group_by(income) %>% 
  filter(row_number() == 1) %>% 
  ungroup()
speeddate <- speeddate %>% # Filter out infinites
  mutate(across(everything(), ~ replace(., is.infinite(.), NA)))
speeddate <- na.omit(speeddate)
speeddate <- speeddate[ , c(1,2,3,7:13)]
speeddate$income <- scale(speeddate$income)
```

```{r}
cqplot(speeddate, main = "speeddate")
```

```{r} 
## Experiments
sqrt_speeddate <- sqrt(speeddate)
log_speeddate <- log(speeddate)
log_speeddate <- log_speeddate %>% # Filter out infinites
  mutate(across(everything(), ~ replace(., is.infinite(.), NA)))
log_speeddate <- na.omit(log_speeddate)

corrplot.mixed(cor(speeddate[,]), lower.col = "black", upper = "ellipse", tl.col = "black", number.cex = .7, order = "hclust", tl.pos = "lt", tl.cex = .7)

# Assuming "speeddate" is your dataset

# Define the columns for boxplot
columns <- c("attraction", "sincerity", "intelligence", "fun", "ambition", "shared_interests", "like", "income")

# Create a new plot
par(mfrow = c(1, 1)) # Set the plot layout to one plot

# Create a boxplot for each column
boxplot_colors <- c("pink", "skyblue1", "violet", "lightsalmon1", "seashell", "powderblue", "lavender", "orchid")

boxplot(speeddate[,2:9], 
        main = "Boxplot of Attributes", # Title of the plot
        names = c("Attraction", "Sincerity", "Intelligence", "Fun", "Ambition", "Shared Interests", "Like", "Income"), # Labels for the columns
        xlab = "Attributes", # Label for x-axis
        ylab = "Values", # Label for y-axis
        col = boxplot_colors # Assign colors to boxplots
)
```

```{r}
# Load required library
library(ggplot2)

hist_income <- ggplot(speeddate, aes(x = income)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Income", x = "Income", y = "Frequency")

hist_attr <- ggplot(speeddate, aes(x = attr)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Attraction", x = "Attraction Score", y = "Frequency")

hist_sinc <- ggplot(speeddate, aes(x = sinc)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Sincerity", x = "Sincerity Score", y = "Frequency")

hist_intel <- ggplot(speeddate, aes(x = intel)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Intelligence", x = "Intelligence Score", y = "Frequency")

hist_fun <- ggplot(speeddate, aes(x = fun)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Fun", x = "Fun Score", y = "Frequency")

hist_amb <- ggplot(speeddate, aes(x = amb)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Ambition", x = "Ambition Score", y = "Frequency")

hist_shar <- ggplot(speeddate, aes(x = shar)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Shared Interests", x = "Shared Interests Score", y = "Frequency")

hist_like <- ggplot(speeddate, aes(x = like)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Likability", x = "Likability Score", y = "Frequency")

hist_income # log
hist_attr
hist_sinc # log
hist_intel # log
hist_fun # log
hist_amb
hist_shar
hist_like # log

```
### PCA
```{r}

pc1 <- princomp(speeddate[, -1], cor = TRUE)
```


Objects created : loadings are the eigenvectors, scores are, well, the scores, sdev is sqrt of eigenvalues!

```{r}

pc1 <- princomp(speeddate[, -1], cor = TRUE)

names(pc1)

#print results - 
#Here are standard deviations
summary(pc1)

#Get loadings
print(pc1$loadings, cutoff = 0, digits = 2)

round(pc1$sdev^2,2)

screeplot(pc1, type = "lines", col = "red", lwd = 2, pch = 19, cex = 1.2, 
          main = "Scree Plot of Raw WB Data")

#parallel analysis 

source("http://www.reuningscherer.net/multivariate/R/parallel.r.txt")

#make the parallel analysis plot using the parallelplot function
parallelplot(pc1)


```

Make scoreplot with confidence ellipse as well as a biplot.

```{r}
#  c(1,2) specifies to use components 1 and 2
#get function from online
source("http://reuningscherer.net/multivariate/r/ciscoreplot.R.txt")

#run the function
ciscoreplot(pc1, c(1, 2), speeddate[, 1])

#make a biplot for first two components
biplot(pc1, choices = c(1, 2), pc.biplot = T)


```

